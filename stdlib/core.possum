# Parsers

## Strings

char = "\u000000"..

ascii = "\u000000".."\u00007F"

alpha = "a".."z" | "A".."Z"

alphas = many(alpha)

lower = "a".."z"

lowers = many(lower)

upper = "A".."Z"

uppers = many(upper)

numeral = "0".."9"

numerals = many(numeral)

binary_numeral = "0" | "1"

octal_numeral = "0".."7"

hex_numeral = numeral | "a".."f" | "A".."F"

alnum = alpha | numeral

alnums = many(alnum)

token = many(unless(char, whitespace))

word = many(alnum | "_" | "-")

line = chars_until(newline | end_of_input)

space =
  " " | "\t" | "\u0000A0" | "\u002000".."\u00200A" | "\u00202F" | "\u00205F" | "\u003000"

spaces = many(space)

newline = "\r\n" | "\u00000A".."\u00000D" | "\u000085" | "\u002028" | "\u002029"

nl = newline

newlines = many(newline)

nls = newlines

whitespace = many(space | newline)

ws = whitespace

chars_until(stop) = many_until(char, stop)

## Numbers

digit = 0..9

integer = as_number(maybe("-") + _number_integer_part)

int = integer

non_negative_integer = as_number(_number_integer_part)

negative_integer = as_number("-" + _number_integer_part)

float = as_number(maybe("-") + _number_integer_part + _number_fraction_part)

scientific_integer = as_number(
  maybe("-") +
  _number_integer_part +
  _number_exponent_part
)

scientific_float = as_number(
  maybe("-") +
  _number_integer_part +
  _number_fraction_part +
  _number_exponent_part
)

number = as_number(
  maybe("-") +
  _number_integer_part +
  maybe(_number_fraction_part) +
  maybe(_number_exponent_part)
)

num = number

non_negative_number = as_number(
  _number_integer_part +
  maybe(_number_fraction_part) +
  maybe(_number_exponent_part)
)

negative_number = as_number(
  "-" +
  _number_integer_part +
  maybe(_number_fraction_part) +
  maybe(_number_exponent_part)
)

_number_integer_part = ("1".."9" + numerals) | numeral

_number_fraction_part = "." + numerals

_number_exponent_part = ("e" | "E") + maybe("-" | "+") + numerals

binary_digit = 0..1

octal_digit = 0..7

hex_digit =
  digit |
  ("a" | "A" $ 10) |
  ("b" | "B" $ 11) |
  ("c" | "C" $ 12) |
  ("d" | "D" $ 13) |
  ("e" | "E" $ 14) |
  ("f" | "F" $ 15)

binary_integer = array(binary_digit) -> Digits $ Num.FromBinaryDigits(Digits)

octal_integer = array(octal_digit) -> Digits $ Num.FromOctalDigits(Digits)

hex_integer = array(hex_digit) -> Digits $ Num.FromHexDigits(Digits)

## Constants

true(t) = t $ true

false(f) = f $ false

boolean(t, f) = true(t) | false(f)

bool = boolean

null(n) = n $ null

## Array

array(elem) = tuple1(elem) * 1..

array_sep(elem, sep) = tuple1(elem) + (tuple1(sep > elem) * 0..)

array_until(elem, stop) = unless(tuple1(elem), stop) * 1.. < peek(stop)

maybe_array(elem) = default(array(elem), [])

maybe_array_sep(elem, sep) = default(array_sep(elem, sep), [])

tuple1(elem) =  elem -> Elem $ [Elem]

tuple2(elem1, elem2) = elem1 -> E1 & elem2 -> E2 $ [E1, E2]

tuple2_sep(elem1, sep, elem2) = elem1 -> E1 & sep & elem2 -> E2 $ [E1, E2]

tuple3(elem1, elem2, elem3) =
  elem1 -> E1 &
  elem2 -> E2 &
  elem3 -> E3 $
  [E1, E2, E3]

tuple3_sep(elem1, sep1, elem2, sep2, elem3) =
  elem1 -> E1 & sep1 &
  elem2 -> E2 & sep2 &
  elem3 -> E3 $
  [E1, E2, E3]

tuple(elem, N) = tuple1(elem) * N

tuple_sep(elem, sep, N) = tuple1(elem) + (tuple1(sep > elem) * (N - 1))

rows(elem, col_sep, row_sep) =
  tuple1(array_sep(elem, col_sep)) +
  (tuple1(row_sep > array_sep(elem, col_sep)) * 0..)

rows_padded(elem, col_sep, row_sep, Pad) =
  peek(_dimensions(elem, col_sep, row_sep)) -> [MaxRowLen, _] &
  elem -> First & _rows_padded(elem, col_sep, row_sep, Pad, $1, MaxRowLen, [First], [])

_rows_padded(elem, col_sep, row_sep, Pad, RowLen, MaxRowLen, AccRow, AccRows) =
  col_sep > elem -> Elem ?
  _rows_padded(elem, col_sep, row_sep, Pad, Num.Inc(RowLen), MaxRowLen, [...AccRow, Elem], AccRows) :
  row_sep > elem -> NextRow ?
  _rows_padded(elem, col_sep, row_sep, Pad, $1, MaxRowLen, [NextRow], [...AccRows, Array.AppendN(AccRow, Pad, MaxRowLen - RowLen)]) :
  const([...AccRows, Array.AppendN(AccRow, Pad, MaxRowLen - RowLen)])

_dimensions(elem, col_sep, row_sep) =
  elem > __dimensions(elem, col_sep, row_sep, $1, $1, $0)

__dimensions(elem, col_sep, row_sep, RowLen, ColLen, MaxRowLen) =
  col_sep > elem ?
  __dimensions(elem, col_sep, row_sep, Num.Inc(RowLen), ColLen, MaxRowLen) :
  row_sep > elem ?
  __dimensions(elem, col_sep, row_sep, $1, Num.Inc(ColLen), Num.Max(RowLen, MaxRowLen)) :
  const([Num.Max(RowLen, MaxRowLen), ColLen])

columns(elem, col_sep, row_sep) =
  rows(elem, col_sep, row_sep) -> Rows $
  Table.Transpose(Rows)

cols = columns

columns_padded(elem, col_sep, row_sep, Pad) =
  rows_padded(elem, col_sep, row_sep, Pad) -> Rows $
  Table.Transpose(Rows)

cols_padded = columns_padded

## Objects

object(key, value) = pair(key, value) * 1..

object_sep(key, kv_sep, value, sep) =
  pair_sep(key, kv_sep, value) +
  ((sep > pair_sep(key, kv_sep, value)) * 0..)

object_until(key, value, stop) =
  unless(pair(key, value), stop) * 1.. < peek(stop)

maybe_object(key, value) = default(object(key, value), {})

maybe_object_sep(key, pair_sep, value, sep) =
  default(object_sep(key, pair_sep, value, sep), {})

pair(key, value) = key -> K & value -> V $ {K: V}

pair_sep(key, sep, value) = key -> K & sep & value -> V $ {K: V}

record1(Key, value) = value -> Value $ {Key: Value}

record2(Key1, value1, Key2, value2) =
  value1 -> V1 &
  value2 -> V2 $
  {Key1: V1, Key2: V2}

record2_sep(Key1, value1, sep, Key2, value2) =
  value1 -> V1 & sep &
  value2 -> V2 $
  {Key1: V1, Key2: V2}

record3(Key1, value1, Key2, value2, Key3, value3) =
  value1 -> V1 &
  value2 -> V2 &
  value3 -> V3 $
  {Key1: V1, Key2: V2, Key3: V3}

record3_sep(Key1, value1, sep1, Key2, value2, sep2, Key3, value3) =
  value1 -> V1 & sep1 &
  value2 -> V2 & sep2 &
  value3 -> V3 $
  {Key1: V1, Key2: V2, Key3: V3}

## Repeated

many(p) = p * 1..

many_sep(p, sep) = p + ((sep > p) * 0..)

many_until(p, stop) = unless(p, stop) * 1.. < peek(stop)

maybe_many(p) = p * 0..

maybe_many_sep(p, sep) = many_sep(p, sep) | succeed

## Utility

peek(p) = p -> V ! const(V)

maybe(p) = p | succeed

unless(p, excluded) = excluded ? @fail : p

skip(p) = null(p)

find(p) = p | (char > find(p))

find_all(p) = array(find(p)) < maybe(many(char))

find_before(p, stop) = stop ? @fail : p | (char > find_before(p, stop))

find_all_before(p, stop) = array(find_before(p, stop)) < maybe(chars_until(stop))

succeed = const($null)

default(p, D) = p | const(D)

const(C) = "" $ C

as_number(p) = p -> "%(0 + N)" $ N

as_string(p) = "%(p)"

surround(p, fill) = fill > p < fill

end_of_input = char ? @fail : succeed

end = end_of_input

input(p) = surround(p, maybe(whitespace)) < end_of_input

one_or_both(a, b) = (a + maybe(b)) | (maybe(a) + b)

## JSON

json =
  json.boolean |
  json.null |
  json.number |
  json.string |
  json.array(json) |
  json.object(json)

json.boolean = boolean("true", "false")

json.null = null("null")

json.number = number

json.string = '"' > _json.string_body < '"'

_json.string_body =
  many(
    _escaped_ctrl_char |
    _escaped_unicode |
    unless(char, _ctrl_char | `\` | '"')
  ) | const($"")

_ctrl_char = "\u000000".."\u00001F"

_escaped_ctrl_char =
  (`\"` $ `"`) |
  (`\\` $ `\`) |
  (`\/` $ `/`) |
  (`\b` $ "\b") |
  (`\f` $ "\f") |
  (`\n` $ "\n") |
  (`\r` $ "\r") |
  (`\t` $ "\t")

_escaped_unicode = _escaped_surrogate_pair | _escaped_codepoint

_escaped_surrogate_pair = _valid_surrogate_pair | _invalid_surrogate_pair

_valid_surrogate_pair =
  _high_surrogate -> H & _low_surrogate -> L $ @SurrogatePairCodepoint(H, L)

_invalid_surrogate_pair = _low_surrogate | _high_surrogate $ "\u00FFFD"

_high_surrogate =
  `\u` > ("D" | "d") + ("8" | "9" | "A" | "B" | "a" | "b") + hex_numeral + hex_numeral

_low_surrogate =
  `\u` > ("D" | "d") + ("C".."F" | "c".."f") + hex_numeral + hex_numeral

_escaped_codepoint = `\u` > (hex_numeral * 4) -> U $ @Codepoint(U)

json.array(elem) = "[" > maybe_array_sep(surround(elem, maybe(ws)), ",") < "]"

json.object(value) =
  "{" >
  maybe_object_sep(
    surround(json.string, maybe(ws)), ":",
    surround(value, maybe(ws)), ","
  )
  < "}"

## TOML

toml = toml.simple

toml.simple = toml.custom(toml.simple_value)

toml.tagged = toml.custom(toml.tagged_value)

toml.custom(value) =
  maybe(_toml.comments + maybe(ws)) &
  _toml.with_root_table(value) | _toml.no_root_table(value) -> Doc &
  maybe(maybe(ws) + _toml.comments) $
  _Toml.Doc.Value(Doc)

_toml.with_root_table(value) =
  _toml.root_table(value, _Toml.Doc.Empty) -> RootDoc &
  (_toml.ws > _toml.tables(value, RootDoc)) | const(RootDoc)

_toml.root_table(value, Doc) =
  _toml.table_body(value, [], Doc)

_toml.no_root_table(value) =
  _toml.table(value, _Toml.Doc.Empty) | _toml.array_of_tables(value, _Toml.Doc.Empty) -> NewDoc &
  _toml.tables(value, NewDoc)

_toml.tables(value, Doc) =
  _toml.ws >
  _toml.table(value, Doc) | _toml.array_of_tables(value, Doc) -> NewDoc ?
  _toml.tables(value, NewDoc) :
  const(Doc)

_toml.table(value, Doc) =
  _toml.table_header -> HeaderPath & _toml.ws_newline & (
    _toml.table_body(value, HeaderPath, Doc) |
    const(_Toml.Doc.EnsureTableAtPath(Doc, HeaderPath))
  )

_toml.array_of_tables(value, Doc) =
  _toml.array_of_tables_header -> HeaderPath & _toml.ws_newline &
  default(_toml.table_body(value, [], _Toml.Doc.Empty), _Toml.Doc.Empty) -> InnerDoc $
  _Toml.Doc.AppendAtPath(Doc, HeaderPath, _Toml.Doc.Value(InnerDoc))

_toml.ws = maybe_many(ws | _toml.comment)

_toml.ws_line = maybe_many(spaces | _toml.comment)

_toml.ws_newline = _toml.ws_line + (nl | end) + _toml.ws

_toml.comments = many_sep(_toml.comment, ws)

_toml.table_header = "[" > surround(_toml.path, maybe(ws)) < "]"

_toml.array_of_tables_header =
  "[[" > surround(_toml.path, maybe(ws)) < "]]"

_toml.table_body(value, HeaderPath, Doc) =
  _toml.table_pair(value) -> [KeyPath, Val] & _toml.ws_newline &
  const(_Toml.Doc.InsertAtPath(Doc, HeaderPath + KeyPath, Val)) -> NewDoc &
  _toml.table_body(value, HeaderPath, NewDoc) | const(NewDoc)

_toml.table_pair(value) =
  tuple2_sep(_toml.path, surround("=", maybe(spaces)), value)

_toml.path = array_sep(_toml.key, surround(".", maybe(ws)))

_toml.key =
  many(alpha | numeral | "_" | "-") |
  toml.string.basic |
  toml.string.literal

_toml.comment = "#" > maybe(line)

toml.simple_value =
  toml.string |
  toml.datetime |
  toml.number |
  toml.boolean |
  toml.array(toml.simple_value) |
  toml.inline_table(toml.simple_value)

toml.tagged_value =
  toml.string |
  _toml.tag($"datetime", $"offset", toml.datetime.offset) |
  _toml.tag($"datetime", $"local", toml.datetime.local) |
  _toml.tag($"datetime", $"date-local", toml.datetime.local_date) |
  _toml.tag($"datetime", $"time-local", toml.datetime.local_time) |
  toml.number.binary_integer |
  toml.number.octal_integer |
  toml.number.hex_integer |
  _toml.tag($"float", $"infinity", toml.number.infinity) |
  _toml.tag($"float", $"not-a-number", toml.number.not_a_number) |
  toml.number.float |
  toml.number.integer |
  toml.boolean |
  toml.array(toml.tagged_value) |
  toml.inline_table(toml.tagged_value)

_toml.tag(Type, Subtype, value) =
  value -> Value $ {"type": Type, "subtype": Subtype, "value": Value}

toml.string =
  toml.string.multi_line_basic |
  toml.string.multi_line_literal |
  toml.string.basic |
  toml.string.literal

toml.datetime =
  toml.datetime.offset |
  toml.datetime.local |
  toml.datetime.local_date |
  toml.datetime.local_time

toml.number =
  toml.number.binary_integer |
  toml.number.octal_integer |
  toml.number.hex_integer |
  toml.number.infinity |
  toml.number.not_a_number |
  toml.number.float |
  toml.number.integer

toml.boolean = boolean("true", "false")

toml.array(elem) =
  "[" > _toml.ws > default(
    array_sep(surround(elem, _toml.ws), ",") < maybe(surround(",", _toml.ws)),
    []
  ) < _toml.ws < "]"

toml.inline_table(value) =
  _toml.empty_inline_table | _toml.nonempty_inline_table(value) -> InlineDoc $
  _Toml.Doc.Value(InlineDoc)

_toml.empty_inline_table = "{" > maybe(spaces) < "}" $ _Toml.Doc.Empty

_toml.nonempty_inline_table(value) =
  "{" > maybe(spaces) >
  _toml.inline_table_pair(value, _Toml.Doc.Empty) -> DocWithFirstPair &
  _toml.inline_table_body(value, DocWithFirstPair)
  < maybe(spaces) < "}"

_toml.inline_table_body(value, Doc) =
  "," > _toml.inline_table_pair(value, Doc) -> NewDoc ?
  _toml.inline_table_body(value, NewDoc) :
  const(Doc)

_toml.inline_table_pair(value, Doc) =
  maybe(spaces) &
  _toml.path -> Key &
  maybe(spaces) & "=" & maybe(spaces) &
  value -> Val &
  maybe(spaces) $
  _Toml.Doc.InsertAtPath(Doc, Key, Val)

toml.string.multi_line_basic = `"""` > maybe(nl) > _toml.string.multi_line_basic($"")

_toml.string.multi_line_basic(Acc) =
  (`"""""` $ (Acc + `""`)) |
  (`""""` $ (Acc + `"`)) |
  (`"""` $ Acc) |
  (
    _toml.escaped_ctrl_char |
    _toml.escaped_unicode |
    ws |
    (`\` + ws > "") |
    unless(char, _ctrl_char | `\`) -> C &
    _toml.string.multi_line_basic(Acc + C)
  )

toml.string.multi_line_literal = `'''` > maybe(nl) > _toml.string.multi_line_literal($"")

_toml.string.multi_line_literal(Acc) =
  (`'''''` $ (Acc + `''`)) |
  (`''''` $ (Acc + `'`)) |
  (`'''` $ Acc) |
  (char -> C & _toml.string.multi_line_literal(Acc + C))

toml.string.basic = '"' > _toml.string.basic_body < '"'

_toml.string.basic_body =
  many(
    _toml.escaped_ctrl_char |
    _toml.escaped_unicode |
    unless(char, _ctrl_char | `\` | '"')
  ) | const($"")

toml.string.literal = "'" > default(chars_until("'"), $"") < "'"

_toml.escaped_ctrl_char =
  (`\"` $ `"`) |
  (`\\` $ `\`) |
  (`\b` $ "\b") |
  (`\f` $ "\f") |
  (`\n` $ "\n") |
  (`\r` $ "\r") |
  (`\t` $ "\t")

_toml.escaped_unicode =
  (`\u` > (hex_numeral * 4) -> U $ @Codepoint(U)) |
  (`\U` > (hex_numeral * 8) -> U $ @Codepoint(U))

toml.datetime.offset = toml.datetime.local_date + ("T" | "t" | " ") + _toml.datetime.time_offset

toml.datetime.local = toml.datetime.local_date + ("T" | "t" | " ") + toml.datetime.local_time

toml.datetime.local_date =
  _toml.datetime.year + "-" + _toml.datetime.month + "-" + _toml.datetime.mday

_toml.datetime.year = numeral * 4

_toml.datetime.month = ("0" + "1".."9") | "11" | "12"

_toml.datetime.mday = ("0".."2" + "1".."9") | "30" | "31"

toml.datetime.local_time =
  _toml.datetime.hours + ":" +
  _toml.datetime.minutes + ":" +
  _toml.datetime.seconds +
  maybe("." + (numeral * 1..9))

_toml.datetime.time_offset = toml.datetime.local_time + ("Z" | "z" | _toml.datetime.time_numoffset)

_toml.datetime.time_numoffset = ("+" | "-") + _toml.datetime.hours + ":" + _toml.datetime.minutes

_toml.datetime.hours = ("0".."1" + "0".."9") | ("2" + "0".."3")

_toml.datetime.minutes = "0".."5" + "0".."9"

_toml.datetime.seconds = ("0".."5" + "0".."9") | "60"

toml.number.integer = as_number(
  _toml.number.sign +
  _toml.number.integer_part
)

_toml.number.sign = maybe("-" | skip("+"))

_toml.number.integer_part =
  ("1".."9" + many(maybe("_") > numeral)) | numeral

toml.number.float = as_number(
  _toml.number.sign +
  _toml.number.integer_part + (
    (_toml.number.fraction_part + maybe(_toml.number.exponent_part)) |
    _toml.number.exponent_part
  )
)

_toml.number.fraction_part = "." + many_sep(numerals, maybe("_"))

_toml.number.exponent_part =
  ("e" | "E") + maybe("-" | "+") + many_sep(numerals, maybe("_"))

toml.number.infinity = maybe("+" | "-") + "inf"

toml.number.not_a_number = maybe("+" | "-") + "nan"

toml.number.binary_integer =
  "0b" & one_or_both(
    array_sep(0, maybe("_")) + maybe(skip("_") < peek(binary_numeral)),
    array_sep(binary_digit, maybe("_"))
  ) -> Digits $
  Num.FromBinaryDigits(Digits)

toml.number.octal_integer =
  "0o" & one_or_both(
    array_sep(0, maybe("_")) + maybe(skip("_") < peek(octal_numeral)),
    array_sep(octal_digit, maybe("_"))
  ) -> Digits $
  Num.FromOctalDigits(Digits)

toml.number.hex_integer =
  "0x" & one_or_both(
    array_sep(0, maybe("_")) + maybe(skip("_") < peek(hex_numeral)),
    array_sep(hex_digit, maybe("_"))
  ) -> Digits $
  Num.FromHexDigits(Digits)

_Toml.Doc.Empty = {"value": {}, "type": {}}

_Toml.Doc.Value(Doc) = Obj.Get(Doc, "value")

_Toml.Doc.Type(Doc) = Obj.Get(Doc, "type")

_Toml.Doc.Has(Doc, Key) = Obj.Has(_Toml.Doc.Type(Doc), Key)

_Toml.Doc.Get(Doc, Key) = {
  "value": Obj.Get(_Toml.Doc.Value(Doc), Key),
  "type": Obj.Get(_Toml.Doc.Type(Doc), Key),
}

_Toml.Doc.IsTable(Doc) = Is.Object(_Toml.Doc.Type(Doc))

_Toml.Doc.Insert(Doc, Key, Val, Type) =
  _Toml.Doc.IsTable(Doc) &
  {
    "value": Obj.Put(_Toml.Doc.Value(Doc), Key, Val),
    "type": Obj.Put(_Toml.Doc.Type(Doc), Key, Type),
  }

_Toml.Doc.AppendToArrayOfTables(Doc, Key, Val) =
  _Toml.Doc.Get(Doc, Key) -> {"value": AoT, "type": "array_of_tables"} &
  _Toml.Doc.Insert(Doc, Key, [...AoT, Val], "array_of_tables")

_Toml.Doc.InsertAtPath(Doc, Path, Val) =
  _Toml.Doc.UpdateAtPath(Doc, Path, Val, _Toml.Doc.ValueUpdater)

_Toml.Doc.EnsureTableAtPath(Doc, Path) =
  _Toml.Doc.UpdateAtPath(Doc, Path, {}, _Toml.Doc.MissingTableUpdater)

_Toml.Doc.AppendAtPath(Doc, Path, Val) =
  _Toml.Doc.UpdateAtPath(Doc, Path, Val, _Toml.Doc.AppendUpdater)

_Toml.Doc.UpdateAtPath(Doc, Path, Val, Updater) =
  Path -> [Key] ? Updater(Doc, Key, Val) :
  Path -> [Key, ...PathRest] ? (
    (
      _Toml.Doc.Has(Doc, Key) ? (
        _Toml.Doc.IsTable(_Toml.Doc.Get(Doc, Key)) &
        _Toml.Doc.UpdateAtPath(_Toml.Doc.Get(Doc, Key), PathRest, Val, Updater)
      ) :
      _Toml.Doc.UpdateAtPath(_Toml.Doc.Empty, PathRest, Val, Updater)
    ) -> InnerDoc &
    _Toml.Doc.Insert(Doc, Key, _Toml.Doc.Value(InnerDoc), _Toml.Doc.Type(InnerDoc))
  ) :
  Doc

_Toml.Doc.ValueUpdater(Doc, Key, Val) =
  _Toml.Doc.Has(Doc, Key) ? @Fail : _Toml.Doc.Insert(Doc, Key, Val, "value")

_Toml.Doc.MissingTableUpdater(Doc, Key, _Val) =
  _Toml.Doc.IsTable(_Toml.Doc.Get(Doc, Key)) ? Doc :
  _Toml.Doc.Insert(Doc, Key, {}, {})

_Toml.Doc.AppendUpdater(Doc, Key, Val) =
  (
    _Toml.Doc.Has(Doc, Key) ? Doc :
    _Toml.Doc.Insert(Doc, Key, [], "array_of_tables")
  ) -> DocWithKey &
  _Toml.Doc.AppendToArrayOfTables(DocWithKey, Key, Val)


## Abstract Syntax Trees

ast.with_operator_precedence(operand, prefix, infix, postfix) =
  _ast.with_precedence_start(operand, prefix, infix, postfix, $0)

_ast.with_precedence_start(operand, prefix, infix, postfix, LeftBindingPower) =
  prefix -> [OpNode, PrefixBindingPower] ? (
    _ast.with_precedence_start(
      operand, prefix, infix, postfix,
      PrefixBindingPower
    ) -> PrefixedNode &
    _ast.with_precedence_rest(
      operand, prefix, infix, postfix,
      LeftBindingPower,
      {...OpNode, "prefixed": PrefixedNode}
    )
  ) : (
    operand -> Node &
    _ast.with_precedence_rest(operand, prefix, infix, postfix, LeftBindingPower, Node)
  )

_ast.with_precedence_rest(operand, prefix, infix, postfix, LeftBindingPower, Node) =
  postfix -> [OpNode, RightBindingPower] &
  const(Is.LessThan(LeftBindingPower, RightBindingPower)) ? (
    _ast.with_precedence_rest(
      operand, prefix, infix, postfix,
      LeftBindingPower,
      {...OpNode, "postfixed": Node}
    )
  ) :
  infix -> [OpNode, RightBindingPower, NextLeftBindingPower] &
  const(Is.LessThan(LeftBindingPower, RightBindingPower)) ? (
    _ast.with_precedence_start(
      operand, prefix, infix, postfix,
      NextLeftBindingPower
    ) -> RightNode &
    _ast.with_precedence_rest(
      operand, prefix, infix, postfix,
      LeftBindingPower,
      {...OpNode, "left": Node, "right": RightNode}
    )
  ) :
  const(Node)

ast.node(Type, value) =
  value -> Value $ {"type": Type, "value": Value}

# Values

## Numbers

Num.Add = @Add

Num.Sub = @Subtract

Num.Mul = @Multiply

Num.Div = @Divide

Num.Pow = @Power

Num.Inc(N) = @Add(N, 1)

Num.Dec(N) = @Subtract(N, 1)

Num.Abs(N) = N -> 0.. | -N

Num.Max(A, B) = A -> B.. ? A : B

Num.FromBinaryDigits(Bs) =
  Array.Length(Bs) -> Len &
  _Num.FromBinaryDigits(Bs, Len - 1, 0)

_Num.FromBinaryDigits(Bs, Pos, Acc) =
  Bs -> [B, ...Rest] ? (
    B -> 0..1 &
    _Num.FromBinaryDigits(
      Rest,
      Pos - 1,
      Acc + Num.Mul(B, Num.Pow(2, Pos)),
    )
  ) :
  Acc

Num.FromOctalDigits(Os) =
  Array.Length(Os) -> Len &
  _Num.FromOctalDigits(Os, Len - 1, 0)

_Num.FromOctalDigits(Os, Pos, Acc) =
  Os -> [O, ...Rest] ? (
    O -> 0..7 &
    _Num.FromOctalDigits(
      Rest,
      Pos - 1,
      Acc + Num.Mul(O, Num.Pow(8, Pos)),
    )
  ) :
  Acc

Num.FromHexDigits(Hs) =
  Array.Length(Hs) -> Len &
  _Num.FromHexDigits(Hs, Len - 1, 0)

_Num.FromHexDigits(Hs, Pos, Acc) =
  Hs -> [H, ...Rest] ? (
    H -> 0..15 &
    _Num.FromHexDigits(
      Rest,
      Pos - 1,
      Acc + Num.Mul(H, Num.Pow(16, Pos)),
    )
  ) :
  Acc

## Arrays

Array.First(Array) = Array -> [F, ..._] & F

Array.Rest(Array) = Array -> [_, ...R] & R

Array.Length(A) = _Array.Length(A, 0)

_Array.Length(A, Acc) =
  A -> [_, ...Rest] ?
  _Array.Length(Rest, Acc + 1) :
  Acc

Array.Reverse(A) = _Array.Reverse(A, [])

_Array.Reverse(A, Acc) =
  A -> [First, ...Rest] ?
  _Array.Reverse(Rest, [First, ...Acc]) :
  Acc

Array.Map(A, Fn) = _Array.Map(A, Fn, [])

_Array.Map(A, Fn, Acc) =
  A -> [First, ...Rest] ?
  _Array.Map(Rest, Fn, [...Acc, Fn(First)]) :
  Acc

Array.Filter(A, Pred) = _Array.Filter(A, Pred, [])

_Array.Filter(A, Pred, Acc) =
  A -> [First, ...Rest] ?
  _Array.Filter(Rest, Pred, Pred(First) ? [...Acc, First] : Acc) :
  Acc

Array.Reject(A, Pred) = _Array.Reject(A, Pred, [])

_Array.Reject(A, Pred, Acc) =
  A -> [First, ...Rest] ?
  _Array.Reject(Rest, Pred, Pred(First) ? Acc : [...Acc, First]) :
  Acc

Array.ZipObject(Ks, Vs) = _Array.ZipObject(Ks, Vs, {})

_Array.ZipObject(Ks, Vs, Acc) =
  Ks -> [K, ...KsRest] & Vs -> [V, ...VsRest] ?
  _Array.ZipObject(KsRest, VsRest, {...Acc, K: V}) :
  Acc

Array.ZipPairs(A1, A2) = _Array.ZipPairs(A1, A2, [])

_Array.ZipPairs(A1, A2, Acc) =
  A1 -> [First1, ...Rest1] & A2 -> [First2, ...Rest2] ?
  _Array.ZipPairs(Rest1, Rest2, [...Acc, [First1, First2]]) :
  Acc

Array.AppendN(A, Val, N) = A + ([Val] * N)

Table.Transpose(T) = _Table.Transpose(T, [])

_Table.Transpose(T, Acc) =
  _Table.FirstPerRow(T) -> FirstPerRow &
  _Table.RestPerRow(T) -> RestPerRow ?
  _Table.Transpose(RestPerRow, [...Acc, FirstPerRow]) :
  Acc

_Table.FirstPerRow(T) =
  T -> [Row, ...Rest] & Row -> [VeryFirst, ..._] &
  __Table.FirstPerRow(Rest, [VeryFirst])

__Table.FirstPerRow(T, Acc) =
  T -> [Row, ...Rest] & Row -> [First, ..._] ?
  __Table.FirstPerRow(Rest, [...Acc, First]) :
  Acc

_Table.RestPerRow(T) = __Table.RestPerRow(T, [])

__Table.RestPerRow(T, Acc) =
  T -> [Row, ...Rest] ? (
    Row -> [_, ...RowRest] ?
    __Table.RestPerRow(Rest, [...Acc, RowRest]) :
    __Table.RestPerRow(Rest, [...Acc, []])
  ) :
  Acc

Table.RotateClockwise(T) = Array.Map(Table.Transpose(T), Array.Reverse)

Table.RotateCounterClockwise(T) = Array.Reverse(Table.Transpose(T))

Table.ZipObjects(Ks, Rows) = _Table.ZipObjects(Ks, Rows, [])

_Table.ZipObjects(Ks, Rows, Acc) =
  Rows -> [Row, ...Rest] ?
  _Table.ZipObjects(Ks, Rest, [...Acc, Array.ZipObject(Ks, Row)]) :
  Acc

## Objects

Obj.Has(O, K) = O -> {K: _, ..._}

Obj.Get(O, K) = O -> {K: V, ..._} & V

Obj.Put(O, K, V) = {...O, K: V}

## Abstract Syntax Trees

Ast.Precedence(OpNode, BindingPower) = [OpNode, BindingPower]

Ast.InfixPrecedence(OpNode, LeftBindingPower, RightBindingPower) =
  [OpNode, LeftBindingPower, RightBindingPower]

## Predicates

Is.String(V) = V -> ("" + _)

Is.Number(V) = V -> (0 + _)

Is.Bool(V) = V -> (false + _)

Is.Null(V) = V -> null

Is.Array(V) = V -> [..._]

Is.Object(V) = V -> {..._}

Is.Equal(A, B) = A -> B

Is.LessThan(A, B) = A -> B ? @Fail : A -> ..B

Is.LessThanOrEqual(A, B) = A -> ..B

Is.GreaterThan(A, B) = A -> B ? @Fail : A -> B..

Is.GreaterThanOrEqual(A, B) = A -> B..

## Conversion

As.Number(V) = Is.Number(V) | (V -> "%(0 + N)" $ N)

As.String(V) = "%(V)"
