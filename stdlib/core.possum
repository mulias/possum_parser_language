char = "\u000000"..

ascii = "\u000000".."\u00007F"

alpha = "a".."z" | "A".."Z"

alphas = many(alpha)

lower = "a".."z"

lowers = many(lower)

upper = "A".."Z"

uppers = many(upper)

numeral = "0".."9"

numerals = many(numeral)

alnum = alpha | numeral

alnums = many(alnum)

space =
  " " | "\t" | "\u0000A0" | "\u002000".."\u00200A" | "\u00202F" | "\u00205F" | "\u003000"

spaces = many(space)

newline = "\r\n" | "\u00000A".."\u00000D" | "\u000085" | "\u002028" | "\u002029"

nl = newline

newlines = many(newline)

nls = newlines

end_of_input = char ? @fail : succeed

end = end_of_input

whitespace = many(space | newline)

ws = whitespace

token = many(unless(char, whitespace))

word = many(alnum | "_" | "-")

line = chars_until(newline | end_of_input)

digit = 0..9

integer = number_of(maybe("-") + _number_integer_part)

int = integer

non_negative_integer = number_of(_number_integer_part)

negative_integer = number_of("-" + _number_integer_part)

float = number_of(maybe("-") + _number_integer_part + _number_fraction_part)

scientific_integer = number_of(
  maybe("-") +
  _number_integer_part +
  _number_exponent_part
)

scientific_float = number_of(
  maybe("-") +
  _number_integer_part +
  _number_fraction_part +
  _number_exponent_part
)

number = number_of(
  maybe("-") +
  _number_integer_part +
  maybe(_number_fraction_part) +
  maybe(_number_exponent_part)
)

num = number

non_negative_number = number_of(
  _number_integer_part +
  maybe(_number_fraction_part) +
  maybe(_number_exponent_part)
)

negative_number = number_of(
  "-" +
  _number_integer_part +
  maybe(_number_fraction_part) +
  maybe(_number_exponent_part)
)

_number_integer_part = ("1".."9" + numerals) | numeral

_number_fraction_part = "." + numerals

_number_exponent_part = ("e" | "E") + maybe("-" | "+") + numerals

hex_numeral = numeral | "a".."f" | "A".."F"

hex_digit =
  digit |
  ("a" | "A" $ 10) |
  ("b" | "B" $ 11) |
  ("c" | "C" $ 12) |
  ("d" | "D" $ 13) |
  ("e" | "E" $ 14) |
  ("f" | "F" $ 15)

true(t) = t $ true

false(f) = f $ false

boolean(t, f) = true(t) | false(f)

bool = boolean

null(n) = n $ null

peek(p) = p -> V ! const(V)

maybe(p) = p | succeed

unless(p, excluded) = excluded ? @fail : p

skip(p) = null(p)

find(p) = p | (char > find(p))

find_all(p) = array(find(p)) < maybe(many(char))

find_before(p, stop) = stop ? @fail :  p | (char > find_before(p, stop))

find_all_before(p, stop) = array(find_before(p, stop)) < maybe(chars_until(stop))

succeed = const(Null)

default(p, D) = p | const(D)

const(C) = "" $ C

number_of = @number_of

string_of(p) = "%(p)"

surround(p, fill) = fill > p < fill

input(p) = surround(p, maybe(whitespace)) < end_of_input

many(p) = p -> First & _many(p, First)

_many(p, Acc) = p -> Next ? _many(p, Acc + Next) : const(Acc)

many_sep(p, sep) = p -> First & _many(sep > p, First)

many_until(p, stop) = unless(p, stop) -> First & _many_until(p, stop, First)

_many_until(p, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  p -> Next & _many_until(p, stop, Acc + Next)

chars_until(stop) = many_until(char, stop)

maybe_many(p) = many(p) | succeed

maybe_many_sep(p, sep) = many_sep(p, sep) | succeed

repeat2(p) = p + p

repeat3(p) = p + p + p

repeat4(p) = p + p + p + p

repeat5(p) = p + p + p + p + p

repeat6(p) = p + p + p + p + p + p

repeat7(p) = p + p + p + p + p + p + p

repeat8(p) = p + p + p + p + p + p + p + p

repeat9(p) = p + p + p + p + p + p + p + p + p

repeat(p, N) =
  const(AssertNonNegativeInteger(N)) &
  _repeat(p, N, Null)

_repeat(p, N, Acc) =
  const(N -> ..0) ?
  const(Acc) :
  p -> Next & _repeat(p, Dec(N), Acc + Next)

repeat_between(p, N, M) =
  const(AssertNonNegativeInteger(N)) &
  const(AssertNonNegativeInteger(M)) &
  _repeat_between(p, N, M, Null)

_repeat_between(p, N, M, Acc) =
  const(M -> ..0) ?
  const(Acc) :
  p -> Next ?
  _repeat_between(p, Dec(N), Dec(M), Acc + Next) :
  const(N -> ..0) ?
  const(Acc) :
  @fail

array(elem) = elem -> First & _array(elem, [First])

_array(elem, Acc) =
  elem -> Elem ?
  _array(elem, [...Acc, Elem]) :
  const(Acc)

array_sep(elem, sep) = elem -> First & _array(sep > elem, [First])

array_until(elem, stop) =
  unless(elem, stop) -> First & _array_until(elem, stop, [First])

_array_until(elem, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  elem -> Elem & _array_until(elem, stop, [...Acc, Elem])

maybe_array(elem) = default(array(elem), [])

maybe_array_sep(elem, sep) = default(array_sep(elem, sep), [])

tuple1(elem) =  elem -> Elem $ [Elem]

tuple2(elem1, elem2) = elem1 -> E1 & elem2 -> E2 $ [E1, E2]

tuple2_sep(elem1, sep, elem2) = elem1 -> E1 & sep & elem2 -> E2 $ [E1, E2]

tuple3(elem1, elem2, elem3) =
  elem1 -> E1 &
  elem2 -> E2 &
  elem3 -> E3 $
  [E1, E2, E3]

tuple3_sep(elem1, sep1, elem2, sep2, elem3) =
  elem1 -> E1 & sep1 &
  elem2 -> E2 & sep2 &
  elem3 -> E3 $
  [E1, E2, E3]

tuple(elem, N) =
  const(AssertNonNegativeInteger(N)) &
  _tuple(elem, N, [])

_tuple(elem, N, Acc) =
  const(N -> ..0) ?
  const(Acc) :
  elem -> Elem & _tuple(elem, Dec(N), [...Acc, Elem])

tuple_sep(elem, sep, N) =
  const(AssertNonNegativeInteger(N)) &
  _tuple_sep(elem, sep, N, [])

_tuple_sep(elem, sep, N, Acc) =
  const(N -> ..0) ?
  const(Acc) :
  sep > elem -> Elem & _tuple_sep(elem, sep, Dec(N), [...Acc, Elem])

table_sep(elem, sep, row_sep) =
  elem -> First & _table_sep(elem, sep, row_sep, [First], [])

_table_sep(elem, sep, row_sep, AccRow, AccRows) =
  sep > elem -> Elem ?
  _table_sep(elem, sep, row_sep, [...AccRow, Elem], AccRows) :
  row_sep > elem -> NextRow ?
  _table_sep(elem, sep, row_sep, [NextRow], [...AccRows, AccRow]) :
  const([...AccRows, AccRow])

maybe_table_sep(elem, sep, row_sep) =
  default(table_sep(elem, sep, row_sep), [[]])

object(key, value) =
  key -> K & value -> V &
  _object(key, value, {K: V})

_object(key, value, Acc) =
  key -> K & value -> V ?
  _object(key, value, {...Acc, K: V}) :
  const(Acc)

object_sep(key, pair_sep, value, sep) =
  key -> K & pair_sep & value -> V &
  _object(sep > key, pair_sep > value, {K: V})

object_until(key, value, stop) =
  unless(key, stop) -> K &
  value -> V &
  _object_until(key, value, stop, {K: V})

_object_until(key, value, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  key -> K & value -> V & _object_until(key, value, stop, {...Acc, K: V})

maybe_object(key, value) = default(object(key, value), {})

maybe_object_sep(key, pair_sep, value, sep) =
  default(object_sep(key, pair_sep, value, sep), {})

pair(key, value) = key -> K & value -> V $ {K: V}

pair_sep(key, sep, value) = key -> K & sep & value -> V $ {K: V}

record1(Key, value) = value -> Value $ {Key: Value}

record2(Key1, value1, Key2, value2) =
  value1 -> V1 &
  value2 -> V2 $
  {Key1: V1, Key2: V2}

record2_sep(Key1, value1, sep, Key2, value2) =
  value1 -> V1 & sep &
  value2 -> V2 $
  {Key1: V1, Key2: V2}

record3(Key1, value1, Key2, value2, Key3, value3) =
  value1 -> V1 &
  value2 -> V2 &
  value3 -> V3 $
  {Key1: V1, Key2: V2, Key3: V3}

record3_sep(Key1, value1, sep1, Key2, value2, sep2, Key3, value3) =
  value1 -> V1 & sep1 &
  value2 -> V2 & sep2 &
  value3 -> V3 $
  {Key1: V1, Key2: V2, Key3: V3}

json =
  json_boolean |
  json_null |
  json_number |
  json_string |
  json_array(json) |
  json_object(json)

json_boolean = boolean("true", "false")

json_null = null("null")

json_number = number

json_string = '"' > _json_string_body < '"'

_json_string_body =
  many(
    _escaped_ctrl_char |
    _escaped_unicode |
    unless(char, _ctrl_char | `\` | '"')
  ) | const($"")

_ctrl_char = "\u000000".."\u00001F"

_escaped_ctrl_char =
  (`\"` $ `"`) |
  (`\\` $ `\`) |
  (`\/` $ `/`) |
  (`\b` $ "\b") |
  (`\f` $ "\f") |
  (`\n` $ "\n") |
  (`\r` $ "\r") |
  (`\t` $ "\t")

_escaped_unicode = _escaped_surrogate_pair | _escaped_codepoint

_escaped_surrogate_pair = _valid_surrogate_pair | _invalid_surrogate_pair

_valid_surrogate_pair =
  _high_surrogate -> H & _low_surrogate -> L $ @SurrogatePairCodepoint(H, L)

_invalid_surrogate_pair = _low_surrogate | _high_surrogate $ "\u00FFFD"

_high_surrogate =
  `\u` > ("D" | "d") + ("8" | "9" | "A" | "B" | "a" | "b") + hex_numeral + hex_numeral

_low_surrogate =
  `\u` > ("D" | "d") + ("C".."F" | "c".."f") + hex_numeral + hex_numeral

_escaped_codepoint = `\u` > repeat4(hex_numeral) -> U $ @Codepoint(U)

json_array(elem) = "[" > maybe_array_sep(surround(elem, maybe(ws)), ",") < "]"

json_object(value) =
  "{" >
  maybe_object_sep(
    surround(json_string, maybe(ws)), ":",
    surround(value, maybe(ws)), ","
  )
  < "}"

ast_with_operator_precedence(operand, prefix, infix, postfix) =
  _ast_with_precedence_start(operand, prefix, infix, postfix, $0)

_ast_with_precedence_start(operand, prefix, infix, postfix, LeftBindingPower) =
  prefix -> [OpNode, PrefixBindingPower] ? (
    _ast_with_precedence_start(
      operand, prefix, infix, postfix,
      PrefixBindingPower
    ) -> PrefixedNode &
    _ast_with_precedence_rest(
      operand, prefix, infix, postfix,
      LeftBindingPower,
      {...OpNode, "prefixed": PrefixedNode}
    )
  ) : (
    operand -> Node &
    _ast_with_precedence_rest(operand, prefix, infix, postfix, LeftBindingPower, Node)
  )

_ast_with_precedence_rest(operand, prefix, infix, postfix, LeftBindingPower, Node) =
  postfix -> [OpNode, RightBindingPower] &
  const(LessThan(LeftBindingPower, RightBindingPower)) ? (
    _ast_with_precedence_rest(
      operand, prefix, infix, postfix,
      LeftBindingPower,
      {...OpNode, "postfixed": Node}
    )
  ) :
  infix -> [OpNode, RightBindingPower, NextLeftBindingPower] &
  const(LessThan(LeftBindingPower, RightBindingPower)) ? (
    _ast_with_precedence_start(
      operand, prefix, infix, postfix,
      NextLeftBindingPower
    ) -> RightNode &
    _ast_with_precedence_rest(
      operand, prefix, infix, postfix,
      LeftBindingPower,
      {...OpNode, "left": Node, "right": RightNode}
    )
  ) :
  const(Node)

AstOpPrecedence(OpNode, BindingPower) = [OpNode, BindingPower]

AstInfixOpPrecedence(OpNode, LeftBindingPower, RightBindingPower) =
  [OpNode, LeftBindingPower, RightBindingPower]

ast_node(Type, value) = value -> Value $ {"type": Type, "value": Value}

Null = null

True = true

False = false

Inc(N) = N + 1

Dec(N) = N - 1

ZipIntoObject(Keys, Values) = _ZipIntoObject(Keys, Values, {})

_ZipIntoObject(Keys, Values, Acc) =
  Keys -> [K, ...KeysRest] & Values -> [V, ...ValuesRest] ?
  _ZipIntoObject(KeysRest, ValuesRest, {...Acc, K: V}) :
  Acc

Map(Array, Fn) = _Map(Array, Fn, [])

_Map(Array, Fn, Acc) =
  Array -> [First, ...Rest] ?
  _Map(Rest, Fn, [...Acc, Fn(First)]) :
  Acc

ArrayFirst(Array) = Array -> [F, ..._] & F

ArrayRest(Array) = Array -> [_, ...R] & R

TransposeTable(T) = _TransposeTable(T, [])

_TransposeTable(T, Acc) =
  Map(T, ArrayFirst) -> FirstPerRow &
  Map(T, ArrayRest) -> RestPerRow ?
  _TransposeTable(RestPerRow, [...Acc, FirstPerRow]) :
  Acc

RotateTableClockwise(T) = Map(TransposeTable(T), Reverse)

Reverse(Array) = _Reverse(Array, [])

_Reverse(Array, Acc) =
  Array -> [First, ...Rest] ?
  _Reverse(Rest, [First, ...Acc]) :
  Acc

Filter(Array, Pred) = _Filter(Array, Pred, [])

_Filter(Array, Pred, Acc) =
  Array -> [First, ...Rest] ?
  _Filter(Rest, Pred, Pred(First) ? [...Acc, First] : Acc) :
  Acc

Reject(Array, Pred) = _Reject(Array, Pred, [])

_Reject(Array, Pred, Acc) =
  Array -> [First, ...Rest] ?
  _Reject(Rest, Pred, Pred(First) ? Acc : [...Acc, First]) :
  Acc

IsNull(V) = V -> null

Tabular(Headers, Rows) = _Tabular(Headers, Rows, [])

_Tabular(Headers, Rows, Acc) =
  Rows -> [Row, ...Rest] ?
  _Tabular(Headers, Rest, [...Acc, ZipIntoObject(Headers, Row)]) :
  Acc

AssertNonNegativeInteger(V) =
  V -> 0.. | @Crash("Expected a non-negative integer, got %(V)")

LessThan(A, B) = A -> B ? @Fail : A -> ..B

GreaterThan(A, B) = A -> B ? @Fail : A -> B..
