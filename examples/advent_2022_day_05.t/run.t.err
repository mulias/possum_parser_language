Advent of Code 2022 Day 5
https://adventofcode.com/2022/day/5

  $ possum $TESTDIR/input.rows_parser $TESTDIR/input.txt
  {
    "cargo_rows": [
      [
        null,
        "D",
        null
      ],
      [
        "N",
        "C",
        null
      ],
      [
        "Z",
        "M",
        "P"
      ]
    ],
    "steps": [
      {
        "count": 1,
        "from": "2",
        "to": "1"
      },
      {
        "count": 3,
        "from": "1",
        "to": "3"
      },
      {
        "count": 2,
        "from": "2",
        "to": "1"
      },
      {
        "count": 1,
        "from": "1",
        "to": "2"
      }
    ]
  }

  $ possum $TESTDIR/input.stacks_parser $TESTDIR/input.txt
  [Line 24, 6-7] Error at '.': Expect expression.
  error: UnexpectedInput
  /home/elias/src/possum_parser_lang/src/parser.zig:632:9: 0x25c954 in errorAt (possum)
          return Error.UnexpectedInput;
          ^
  /home/elias/src/possum_parser_lang/src/parser.zig:614:9: 0x2896a9 in errorAtPrevious (possum)
          return self.errorAt(self.previous, message);
          ^
  /home/elias/src/possum_parser_lang/src/parser.zig:126:9: 0x28c65c in prefix (possum)
          return switch (tokenType) {
          ^
  /home/elias/src/possum_parser_lang/src/parser.zig:88:20: 0x25cd6f in parseWithPrecedence (possum)
          var node = try self.prefix(self.previous.tokenType);
                     ^
  /home/elias/src/possum_parser_lang/src/parser.zig:78:9: 0x286bfa in expression (possum)
          return self.parseWithPrecedence(.None);
          ^
  /home/elias/src/possum_parser_lang/src/parser.zig:495:24: 0x2870eb in arrayElems (possum)
          const nodeId = try self.expression();
                         ^
  /home/elias/src/possum_parser_lang/src/parser.zig:502:17: 0x287246 in arrayElems (possum)
                  try self.arrayElems(),
                  ^
  /home/elias/src/possum_parser_lang/src/parser.zig:482:38: 0x287577 in array (possum)
              const arrayElemsNodeId = try self.arrayElems();
                                       ^
  /home/elias/src/possum_parser_lang/src/parser.zig:126:9: 0x28c65c in prefix (possum)
          return switch (tokenType) {
          ^
  /home/elias/src/possum_parser_lang/src/parser.zig:88:20: 0x25cd6f in parseWithPrecedence (possum)
          var node = try self.prefix(self.previous.tokenType);
                     ^
  /home/elias/src/possum_parser_lang/src/parser.zig:397:29: 0x28cf31 in binaryOp (possum)
          const rightNodeId = try self.parseWithPrecedence(operatorPrecedence(t.tokenType));
                              ^
  /home/elias/src/possum_parser_lang/src/parser.zig:143:9: 0x28d4d6 in infix (possum)
          return switch (tokenType) {
          ^
  /home/elias/src/possum_parser_lang/src/parser.zig:116:20: 0x25cef1 in parseWithPrecedence (possum)
              node = try self.infix(self.previous.tokenType, node);
                     ^
  /home/elias/src/possum_parser_lang/src/parser.zig:68:22: 0x25cabe in statement (possum)
          const node = try self.parseWithPrecedence(.None);
                       ^
  /home/elias/src/possum_parser_lang/src/parser.zig:57:35: 0x25d2ef in parse (possum)
              try self.ast.pushRoot(try self.statement());
                                    ^
  /home/elias/src/possum_parser_lang/src/vm.zig:95:9: 0x27a527 in interpret (possum)
          try parser.parse(programSource);
          ^
  /home/elias/src/possum_parser_lang/src/main.zig:31:20: 0x27db03 in parse (possum)
      const parsed = try vm.interpret(parser, input);
                     ^
  /home/elias/src/possum_parser_lang/src/main.zig:16:26: 0x27ea87 in main (possum)
          .Parse => |args| try parse(alloc, args.parser, args.input),
                           ^
  [1]
