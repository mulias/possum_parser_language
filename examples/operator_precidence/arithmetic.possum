w = maybe(whitespace)

var_node = ast.node($"var", alphas)

number_node = ast.node($"num", non_negative_number)

grouped_expr = "(" > w > expr < w < ")"

operand = var_node | number_node | grouped_expr

conditional_infix =
  "?" & w & expr -> Middle & w & ":" $ {"type": "cond", "middle": Middle}

index_postfix = ast.node($"index", "[" > w > expr < w < "]")

prefix =
  ("-" $ Ast.Precedence({"type": "neg"}, 7))

infix =
  ("^"  $ Ast.InfixPrecedence({"type": "exp"},    6, 6.5)) |
  ("*"  $ Ast.InfixPrecedence({"type": "mul"},    5, 5.5)) |
  ("/"  $ Ast.InfixPrecedence({"type": "div"},    5, 5.5)) |
  ("+"  $ Ast.InfixPrecedence({"type": "add"},    4, 4.5)) |
  ("-"  $ Ast.InfixPrecedence({"type": "sub"},    4, 4.5)) |
  ("==" $ Ast.InfixPrecedence({"type": "eql"},    3, 3.5)) |
  (conditional_infix ->
   Node $ Ast.InfixPrecedence(Node,               2.5, 2)) |
  ("="  $ Ast.InfixPrecedence({"type": "assign"}, 1.5, 1))

postfix =
  ("!" $ Ast.Precedence({"type": "fac"}, 8)) |
  (index_postfix -> Node $ Ast.Precedence(Node, 8))

expr = ast.with_operator_precedence(
  surround(operand, w),
  surround(prefix, w),
  surround(infix, w),
  surround(postfix, w)
)

expr
