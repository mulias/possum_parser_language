input(program)

program = ast_node($"program", array_sep(expr, expr_sep) < maybe(expr_sep))

expr_sep = w_arround(";") | nl

w = maybe_many(comment | whitespace)

comment = "#" > chars_until(nl | end)

w_arround(p) = surround(p, w)

# Don't parse trailing whitespace so that we can detect newline expr separators.
expr = ast_with_operator_precedence(
  w > operand,
  w_arround(prefix),
  w_arround(infix),
  w > postfix
)

operand =
  grouped_expr |
  boolean_node |
  null_node |
  string_node |
  template_string_node |
  number_node |
  parser_variable_node |
  value_variable_node |
  underscore_variable_node |
  array_node |
  object_node

prefix =
  ("$"   $ [{"type": "value_label"},         9]) |
  ("..." $ [{"type": "spread"},              8]) |
  (".."  $ [{"type": "upper_bounded_range"}, 7]) |
  ("-"   $ [{"type": "negate"},              6])

infix =
  (".." $ [{"type": "range"},         5, 5.5]) |
  ("|"  $ [{"type": "or"},            4, 4.5]) |
  (">"  $ [{"type": "take_right"},    4, 4.5]) |
  ("<"  $ [{"type": "take_left"},     4, 4.5]) |
  ("+"  $ [{"type": "merge"},         4, 4.5]) |
  ("!"  $ [{"type": "backtrack"},     4, 4.5]) |
  ("->" $ [{"type": "destructure"},   4, 4.5]) |
  ("$"  $ [{"type": "return"},        4, 4.5]) |
  ("-"  $ [{"type": "subtract"},      4, 4.5]) |
  ("&"  $ [{"type": "and"},           3, 3.5]) |
  (conditional_infix -> Node $ [Node, 2.5, 2]) |
  ("="  $ [{"type": "assign"},        1.5, 1])

postfix =
  (call_or_define_function_postfix -> Node $ [Node, 11]) |
  (lower_bounded_range_postfix -> Node     $ [Node, 10])

grouped_expr = "(" > w > expr < w < ")"

boolean_node = ast_node(
  $"boolean",
  boolean("t" + word -> "true", "f" + word -> "false")
)

null_node = "n" + word -> "null" $ {"type": "null"}

string_node = ast_node(
  $"string",
  surround(quoted_string_body(`"`), `"`) |
  surround(quoted_string_body(`'`), `'`) |
  surround(backtick_string_body, "`")
)

quoted_string_body(end_quote) =
  many(
    string_escape_char |
    string_escape_unicode |
    unless(char, `\` | `%(` | end_quote)
  ) |
  const($"")

string_escape_char =
  `\0` | `\b` | `\t` | `\n` | `\v` | `\f` | `\r` | `\'` | `\"` | `\\`

string_escape_unicode = `\u` + repeat(hex_numeral, $6)

backtick_string_body = chars_until("`") | const($"")

template_string_node = ast_node(
  $"template_string",
  surround(template_string_body(`"`, [], $""), `"`) |
  surround(template_string_body(`'`, [], $""), `'`)
)

template_string_body(end_quote, TemplateParts, Str) =
  peek(end_quote) ? const(AppendNonEmptyString(TemplateParts, Str)) :
  `%(` > w < `)` ? template_string_body(end_quote, TemplateParts, Str) :
  `%(` ? (
    w_arround(expr) -> Expr & ")" &
    template_string_body(
      end_quote,
      [...AppendNonEmptyString(TemplateParts, Str), Expr],
      $""
    )
  ) :
  string_escape_char | string_escape_unicode | unless(char, `\`) -> Next &
  template_string_body(end_quote, TemplateParts, Str + Next)

AppendNonEmptyString(TemplateParts, Str) =
  Str -> "" ? TemplateParts : [...TemplateParts, {"type": "string", "value": Str}]

number_node = ast_node($"number", number)

variable_node(Type, name_format) =
  peek(tuple2(
    boolean("@", succeed),
    boolean(many("_"), succeed)
  )) -> [IsMeta, IsUnderscored] &
  maybe("@") + maybe_many("_") + name_format -> Name $
  {
    "type": Type,
    "name": Name,
    "is_meta": IsMeta,
    "is_underscored": IsUnderscored
  }

parser_variable_node = variable_node($"parser_variable", lower + maybe(word))

value_variable_node = variable_node($"value_variable", upper + maybe(word))

underscore_variable_node = ast_node($"underscore_variable", many("_"))

array_node = ast_node($"array", json_array(expr))

object_node = ast_node(
  $"object",
  "{" > maybe_array_sep(object_pair, ",") < "}"
)

object_pair = tuple2_sep(w_arround(expr), ":", w_arround(expr))

conditional_infix =
  "?" & w & expr -> Middle & w & ":" $
  {"type": "conditional", "middle": Middle}

# Since ".." can be a prefix, infix, or postfix we need to make sure it isn't
# parsed as postfix when it is intended as infix. To do this we look ahead to
# make sure there isn't a right hand value, and if there is we fail in order to
# parse as infix instead.
lower_bounded_range_postfix =
  ".." & peek(w > (postfix | infix | end)) $
  {"type": "lower_bounded_range"}

call_or_define_function_postfix = ast_node(
  $"call_or_define_function",
  "(" > w > maybe_array_sep(w_arround(expr), ",") < w < ")"
)
