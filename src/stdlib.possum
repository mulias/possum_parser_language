char = "\u0000".."\U10FFFF"

ascii = "\u0000".."\u007F"

alpha = "a".."z" | "A".."Z"

alphas = many(alpha)

lower = "a".."z"

lowers = many(lower)

upper = "A".."Z"

uppers = many(upper)

numeral = "0".."9"

numerals = many(numeral)

alnum = alpha | numeral

alnums = many(alnum)

space = " " | "\t" | "\u00A0" | "\u2000".."\u200A" | "\u202F" | "\u205F" | "\u3000"

spaces = many(space)

newline = "\r\n" | "\u000A".."\u000D" | "\u0085" | "\u2028" | "\u2029"

newlines = many(newline)

nl = newline

nls = newlines

end_of_input = peek(char) ? @fail : succeed

end = end_of_input

whitespace = many(space | newline)

ws = whitespace

token = until(char, whitespace | end_of_input)

word = many(alnum | "_" | "-")

line = until(char, newline | end_of_input)

digit = number_of(numeral)

integer = number_of(_number_integer_part)

int = integer

float = number_of(_number_integer_part + _number_decimal_part)

scientific_integer = number_of(_number_integer_part + _number_exponent_part)

scientific_float = number_of(
  _number_integer_part +
  _number_decimal_part +
  _number_exponent_part
)

number = number_of(
  _number_integer_part +
  maybe(_number_decimal_part) +
  maybe(_number_exponent_part)
)

num = number

_number_integer_part = maybe("-") + (("1".."9" + numerals) | numerals)

_number_decimal_part = "." + numerals

_number_exponent_part = ("e" | "E") + maybe("-" | "+") + numerals

true(t) = t $ true

false(f) = f $ false

boolean(t, f) = true(t) | false(f)

bool = boolean

null(n) = n $ null

peek(p) = (V <- p) ! const(V)

maybe(p) = p | succeed

skip(p) = null(p)

succeed = const(null)

default(p, D) = p | const(D)

const(C) = "" $ C

number_of = @number_of

surround(p, fill) = fill > p < fill

input(p) = surround(p, maybe(whitespace)) < end_of_input

many(p) = First <- p & _many(p, First)

_many(p, Acc) = Next <- p ? _many(p, Acc + Next) : const(Acc)

maybe_many(p) = many(p) | succeed

until(p, stop) = First <- p & _until(p, stop, First)

_until(p, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  Next <- p & _until(p, stop, Acc + Next)

unless(p, excluded) = excluded ? @fail : p

scan(p) = p | (char > scan(p))

array(elem) = First <- elem & _array(elem, [First])

_array(elem, Acc) =
  Elem <- elem ?
  _array(elem, Acc + [Elem]) :
  const(Acc)

array_sep(elem, sep) = First <- elem & _array_sep(elem, sep, [First])

_array_sep(elem, sep, Acc) =
  Elem <- (sep > elem) ?
  _array_sep(elem, sep, Acc + [Elem]) :
  const(Acc)

array_until(elem, stop) = First <- elem & _array_until(elem, stop, [First])

_array_until(elem, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  Elem <- elem & _array_until(elem, stop, Acc + [Elem])

maybe_array(elem) = default(array(elem), [])

maybe_array_sep(elem, sep) = default(array_sep(elem, sep), [])

table_sep(elem, sep, row_sep) =
  First <- elem & _table_sep(elem, sep, row_sep, [First], [])

_table_sep(elem, sep, row_sep, AccRow, AccRows) =
  Elem <- (sep > elem) ?
  _table_sep(elem, sep, row_sep, AccRow + [Elem], AccRows) :
  NextRow <- (row_sep > elem) ?
  _table_sep(elem, sep, row_sep, [NextRow], AccRows + [AccRow]) :
  const(AccRows + [AccRow])

maybe_table_sep(elem, sep, row_sep) =
  default(table_sep(elem, sep, row_sep), [[]])

single(elem) = Elem <- elem $ [Elem]

pair(elem) = E1 <- elem & E2 <- elem $ [E1, E2]

pair_sep(elem, sep) = E1 <- elem & sep & E2 <- elem $ [E1, E2]

triple(elem) = E1 <- elem & E2 <- elem & E3 <- elem $ [E1, E2, E3]

triple_sep(elem, sep) = E1 <- elem & sep & E2 <- elem & sep & E3 <- elem $ [E1, E2, E3]

object(key, value) =
  K <- key & V <- value &
  _object(key, value, {K: V})

_object(key, value, Acc) =
  K <- key & V <- value ?
  _object(key, value, Acc + {K: V}) :
  const(Acc)

object_sep(key, pair_sep, value, sep) =
  K <- key & pair_sep & V <- value &
  _object_sep(key, pair_sep, value, sep, {K: V})

_object_sep(key, pair_sep, value, sep, Acc) =
  sep & K <- key & pair_sep & V <- value ?
  _object_sep(key, pair_sep, value, sep, Acc + {K: V}) :
  const(Acc)

object_until(key, value, stop) =
  K <- key & V <- value & _object_until(key, value, stop, {K: V})

_object_until(key, value, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  K <- key & V <- value & _object_until(key, value, stop, Acc + {K: V})

maybe_object(key, value) = default(object(key, value), {})

maybe_object_sep(key, pair_sep, value, sep) =
  default(object_sep(key, pair_sep, value, sep), {})

label(Key, value) = Value <- value $ {Key: Value}
