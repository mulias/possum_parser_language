char = "\u0000".."\U10FFFF"

ascii = "\u0000".."\u007F"

alpha = "a".."z" | "A".."Z"

alphas = many(alpha)

lower = "a".."z"

lowers = many(lower)

upper = "A".."Z"

uppers = many(upper)

numeral = "0".."9"

numerals = many(numeral)

alnum = alpha | numeral

alnums = many(alnum)

space =
  " " | "\t" | "\u00A0" | "\u2000".."\u200A" | "\u202F" | "\u205F" | "\u3000"

spaces = many(space)

newline = "\r\n" | "\u000A".."\u000D" | "\u0085" | "\u2028" | "\u2029"

nl = newline

newlines = many(newline)

nls = newlines

end_of_input = char ? @fail : succeed

end = end_of_input

whitespace = many(space | newline)

ws = whitespace

token = many(unless(char, whitespace))

word = many(alnum | "_" | "-")

line = many_until(char, newline | end_of_input)

digit = 0..9

integer = number_of(_number_integer_part)

int = integer

non_negative_integer = number_of(_number_non_negative_integer_part)

negative_integer = number_of("-" + _number_non_negative_integer_part)

float = number_of(_number_integer_part + _number_fraction_part)

scientific_integer = number_of(_number_integer_part + _number_exponent_part)

scientific_float = number_of(
  _number_integer_part +
  _number_fraction_part +
  _number_exponent_part
)

number = number_of(
  _number_integer_part +
  maybe(_number_fraction_part) +
  maybe(_number_exponent_part)
)

num = number

_number_integer_part = maybe("-") + _number_non_negative_integer_part

_number_non_negative_integer_part = (("1".."9" + numerals) | numeral)

_number_fraction_part = "." + numerals

_number_exponent_part = ("e" | "E") + maybe("-" | "+") + numerals

true(t) = t $ true

false(f) = f $ false

boolean(t, f) = true(t) | false(f)

bool = boolean

null(n) = n $ null

peek(p) = p -> V ! const(V)

maybe(p) = p | succeed

unless(p, excluded) = excluded ? @fail : p

skip(p) = null(p)

scan(p) = p | (char > scan(p))

succeed = const(null)

default(p, D) = p | const(D)

const(C) = "" $ C

number_of = @number_of

string_of(p) = "%(p)"

surround(p, fill) = fill > p < fill

input(p) = surround(p, maybe(whitespace)) < end_of_input

many(p) = p -> First & _many(p, First)

_many(p, Acc) = p -> Next ? _many(p, Acc + Next) : const(Acc)

many_sep(p, sep) = p -> First & _many(sep > p, First)

many_until(p, stop) = unless(p, stop) -> First & _many_until(p, stop, First)

_many_until(p, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  p -> Next & _many_until(p, stop, Acc + Next)

maybe_many(p) = many(p) | succeed

maybe_many_sep(p, sep) = many_sep(p, sep) | succeed

array(elem) = elem -> First & _array(elem, [First])

_array(elem, Acc) =
  elem -> Elem ?
  _array(elem, [...Acc, Elem]) :
  const(Acc)

array_sep(elem, sep) = elem -> First & _array(sep > elem, [First])

array_until(elem, stop) =
  unless(elem, stop) -> First & _array_until(elem, stop, [First])

_array_until(elem, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  elem -> Elem & _array_until(elem, stop, [...Acc, Elem])

maybe_array(elem) = default(array(elem), [])

maybe_array_sep(elem, sep) = default(array_sep(elem, sep), [])

tuple1(elem) =  elem -> Elem $ [Elem]

tuple2(elem1, elem2) = elem1 -> E1 & elem2 -> E2 $ [E1, E2]

tuple2_sep(elem1, sep, elem2) = elem1 -> E1 & sep & elem2 -> E2 $ [E1, E2]

tuple3(elem1, elem2, elem3) =
  elem1 -> E1 &
  elem2 -> E2 &
  elem3 -> E3 $
  [E1, E2, E3]

tuple3_sep(elem1, sep1, elem2, sep2, elem3) =
  elem1 -> E1 & sep1 &
  elem2 -> E2 & sep2 &
  elem3 -> E3 $
  [E1, E2, E3]

table_sep(elem, sep, row_sep) =
  elem -> First & _table_sep(elem, sep, row_sep, [First], [])

_table_sep(elem, sep, row_sep, AccRow, AccRows) =
  sep > elem -> Elem ?
  _table_sep(elem, sep, row_sep, [...AccRow, Elem], AccRows) :
  row_sep > elem -> NextRow ?
  _table_sep(elem, sep, row_sep, [NextRow], [...AccRows, AccRow]) :
  const([...AccRows, AccRow])

maybe_table_sep(elem, sep, row_sep) =
  default(table_sep(elem, sep, row_sep), [[]])

object(key, value) =
  key -> K & value -> V &
  _object(key, value, {K: V})

_object(key, value, Acc) =
  key -> K & value -> V ?
  _object(key, value, Acc + {K: V}) :
  const(Acc)

object_sep(key, pair_sep, value, sep) =
  key -> K & pair_sep & value -> V &
  _object(sep > key, pair_sep > value, {K: V})

object_until(key, value, stop) =
  unless(key, stop) -> K &
  value -> V &
  _object_until(key, value, stop, {K: V})

_object_until(key, value, stop, Acc) =
  peek(stop) ?
  const(Acc) :
  key -> K & value -> V & _object_until(key, value, stop, Acc + {K: V})

maybe_object(key, value) = default(object(key, value), {})

maybe_object_sep(key, pair_sep, value, sep) =
  default(object_sep(key, pair_sep, value, sep), {})

record1(Key, value) = value -> Value $ {Key: Value}

record2(Key1, value1, Key2, value2) =
  value1 -> V1 &
  value2 -> V2 $
  {Key1: V1, Key2: V2}

record2_sep(Key1, value1, sep, Key2, value2) =
  value1 -> V1 & sep &
  value2 -> V2 $
  {Key1: V1, Key2: V2}

record3(Key1, value1, Key2, value2, Key3, value3) =
  value1 -> V1 &
  value2 -> V2 &
  value3 -> V3 $
  {Key1: V1, Key2: V2, Key3: V3}

record3_sep(Key1, value1, sep1, Key2, value2, sep2, Key3, value3) =
  value1 -> V1 & sep1 &
  value2 -> V2 & sep2 &
  value3 -> V3 $
  {Key1: V1, Key2: V2, Key3: V3}
