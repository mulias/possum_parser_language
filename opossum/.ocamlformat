version = 0.21.0

#-p {conventional|default|ocamlformat|janestreet},
#--profile={conventional|default|ocamlformat|janestreet}
#   Select a preset profile which sets all options, overriding lower
#   priority configuration. The conventional profile aims to be as
#   familiar and "conventional" appearing as the available options
#   allow. default is an alias for the conventional profile. The
#   ocamlformat profile aims to take advantage of the strengths of a
#   parsetree-based auto-formatter, and to limit the consequences of
#   the weaknesses imposed by the current implementation. This is a
#   style which optimizes for what the formatter can do best, rather
#   than to match the style of any existing code. General guidelines
#   that have directed the design include: Legibility, in the sense of
#   making it as hard as possible for quick visual parsing to give the
#   wrong interpretation, is of highest priority; Whenever possible
#   the high-level structure of the code should be obvious by looking
#   only at the left margin, in particular, it should not be necessary
#   to visually jump from left to right hunting for critical keywords,
#   tokens, etc; All else equal compact code is preferred as reading
#   without scrolling is easier, so indentation or white space is
#   avoided unless it helps legibility; Attention has been given to
#   making some syntactic gotchas visually obvious. The janestreet
#   profile is used at Jane Street. The default value is default.
profile = default

#--assignment-operator={end-line|begin-line}
#   Position of the assignment operator. end-line positions assignment
#   operators (`:=` and `<-`) at the end of the line and breaks after
#   it if the whole assignment expression does not fit on a single
#   line. begin-line positions assignment operators (`:=` and `<-`) at
#   the beginning of the line and breaks before it if the whole
#   assignment expression does not fit on a single line. The default
#   value is end-line.
assignment-operator = end-line

#--break-cases={fit|nested|toplevel|fit-or-vertical|vertical|all}
#   Break pattern match cases. Specifying fit lets pattern matches
#   break at the margin naturally. nested forces a break after nested
#   or-patterns to highlight the case body. Note that with nested, the
#   indicate-nested-or-patterns option is not needed, and so ignored.
#   toplevel forces top-level cases (i.e. not nested or-patterns) to
#   break across lines, otherwise break naturally at the margin.
#   fit-or-vertical tries to fit all or-patterns on the same line,
#   otherwise breaks. vertical vertically breaks branches. all forces
#   all pattern matches to break across lines. The default value is
#   fit.
break-cases = fit

#--break-fun-decl={wrap|fit-or-vertical}
#   Style for function declarations and types. wrap breaks only if
#   necessary. fit-or-vertical vertically breaks arguments if they do
#   not fit on a single line. smart is like fit-or-vertical but try to
#   fit arguments on their line if they fit. The default value is
#   wrap.
break-fun-decl = fit-or-vertical

#--break-fun-sig={wrap|fit-or-vertical}
#   Style for function signatures. wrap breaks only if necessary.
#   fit-or-vertical vertically breaks arguments if they do not fit on
#   a single line. smart is like fit-or-vertical but try to fit
#   arguments on their line if they fit. The default value is wrap.
break-fun-sig = fit-or-vertical

#--break-infix={wrap|fit-or-vertical|wrap-or-vertical}
#   Break sequence of infix operators. wrap will group simple
#   expressions and try to format them in a single line.
#   fit-or-vertical vertically breaks expressions if they do not fit
#   on a single line. wrap-or-vertical behaves like wrap for high
#   precedence operators and behaves like fit-or-vertical for low
#   precedence operators. The default value is wrap.
break-infix = fit-or-vertical

#--break-infix-before-func
#   Break infix operators whose right arguments are anonymous
#   functions specially: do not break after the operator so that the
#   first line of the function appears docked at the end of line after
#   the operator. The flag is unset by default.
break-infix-before-func = false

#--break-separators={after|before}
#   Break before or after separators such as `;` in list or record
#   expressions. after breaks the expressions after the separator.
#   before breaks the expressions before the separator. The default
#   value is after.
break-separators = before

#--break-sequences
#   Force sequence expressions to break irrespective of margin. The
#   flag is set by default.
break-sequences = true

#--cases-matching-exp-indent={normal|compact}
#   Indentation of cases right-hand sides which are `match` or `try`
#   expressions. normal indents as it would any other expression.
#   compact forces an indentation of 2, unless nested-match is set to
#   align and we're on the last case. The default value is normal.
cases-matching-exp-indent = normal

#--doc-comments={after-when-possible|before-except-val|before}
#   Doc comments position. after-when-possible puts doc comments after
#   the corresponding code. This option has no effect on variant
#   declarations because that would change their meaning and on
#   structures, signatures and objects for readability.
#   before-except-val puts doc comments before the corresponding code,
#   but puts doc comments of val and external declarations after the
#   corresponding declarations. before puts comments before the
#   corresponding code. The default value is after-when-possible.
doc-comments = before

#--doc-comments-padding=PADDING
#   Add PADDING spaces before doc comments in type declarations. The
#   default value is 2.
doc-comments-padding = 2

#--doc-comments-tag-only={default|fit}
#   Position of doc comments with only tags. default means no special
#   treatment. fit puts doc comments on the same line. The default
#   value is default.
doc-comments-tag-only = default

#--dock-collection-brackets
#   Dock the brackets of lists, arrays and records, so that when the
#   collection does not fit on a single line the brackets are opened
#   on the preceding line and closed on the following line. The flag
#   is set by default.
dock-collection-brackets = false

#--field-space={loose|tight|tight-decl}
#   Whether or not to use a space between a field name and the
#   punctuation symbol (`:` or `=`) preceding the rhs. This option
#   affects records and objects. loose uses a space. tight does not
#   use a space. tight-decl is tight for declarations and loose for
#   instantiations. The default value is loose.
field-space = loose

#--if-then-else={compact|vertical|keyword-first}
#   If-then-else formatting. compact tries to format an if-then-else
#   expression on a single line. fit-or-vertical vertically breaks
#   branches if they do not fit on a single line. vertical always
#   vertically breaks branches. keyword-first formats if-then-else
#   expressions such that the if-then-else keywords are the first on
#   the line. k-r formats if-then-else expressions with parentheses
#   that match the K&R style. The default value is compact.
if-then-else = compact

#--indicate-multiline-delimiters={no|space}
#   How to indicate that two matching delimiters live on different
#   lines. no doesn't do anything special to indicate the closing
#   delimiter. space prints a space inside the delimiter to indicate
#   the matching one is on a different line. closing-on-separate-line
#   makes sure that the closing delimiter is on its own line. The
#   default value is no.
indicate-multiline-delimiters = no

#--indicate-nested-or-patterns={unsafe-no|space}
#   Control whether or not to indicate nested or-pattern using
#   indentation. unsafe-no does not indicate nested or-patterns.
#   Warning: this can produce confusing code where a short body of a
#   match case is visually hidden by surrounding long patterns,
#   leading to misassociation between patterns and body expressions.
#   space starts lines of nested or-patterns with " |" rather than "|
#   ". The default value is unsafe-no.
indicate-nested-or-patterns = unsafe-no

#--infix-precedence={indent|parens}
#   Use indentation or also discretionary parentheses to explicitly
#   disambiguate precedences of infix operators. indent uses
#   indentation to explicitly disambiguate precedences of infix
#   operators. parens uses parentheses to explicitly disambiguate
#   precedences of infix operators. The default value is indent.
infix-precedence = parens

#--let-and={compact|sparse}
#   Style of let_and. compact will try to format `let p = e and p = e`
#   in a single line. sparse will always break between them. The
#   default value is compact.
let-and = sparse

#--let-binding-spacing={compact|double-semicolon}
#   Spacing between let binding. compact spacing separates adjacent
#   let bindings in a module according to module-item-spacing. sparse
#   places two open lines between a multi-line module-level let
#   binding and the next. double-semicolon places double semicolons
#   and an open line between a multi-line module-level let binding and
#   the next. The default value is compact.
let-binding-spacing = compact

#--let-module={compact|sparse}
#   Module binding formatting. compact does not break a line after the
#   let module ... = and before the in if the module declaration does
#   not fit on a single line. sparse breaks a line after let module
#   ... = and before the in if the module declaration does not fit on
#   a single line. The default value is compact.
let-module = compact

#--module-item-spacing={compact|sparse}
#   Spacing between items of structures and signatures. compact will
#   not leave open lines between one-liners of similar sorts. sparse
#   will always break a line between two items. preserve will not
#   leave open lines between one-liners of similar sorts unless there
#   is an open line in the input. The default value is compact.
module-item-spacing = sparse

#--parens-ite
#   Uses parentheses around if-then-else branches that spread across
#   multiple lines. The flag is unset by default.
parens-ite = false

#--parse-docstrings
#   Parse and format docstrings. The flag is unset by default.
parse-docstrings = true

#--parse-toplevel-phrases
#   Parse and format toplevel phrases and their output. The flag is
#   unset by default.
parse-toplevel-phrases = false

#--sequence-blank-line={preserve-one|compact}
#   Blank line between expressions of a sequence. preserve will keep a
#   blank line between two expressions of a sequence if the input
#   contains at least one. compact will not keep any blank line
#   between expressions of a sequence. The default value is
#   preserve-one.
sequence-blank-line = preserve-one

#--sequence-style={terminator|separator}
#   Style of sequence. terminator only puts spaces after semicolons.
#   separator puts spaces before and after semicolons. before breaks
#   the sequence before semicolons. The default value is terminator.
sequence-style = separator

#--single-case={compact|sparse}
#   Style of pattern matching expressions with only a single case.
#   compact will try to format a single case on a single line. sparse
#   will always break the line before a single case. The default value
#   is compact.
single-case = compact

#--space-around-arrays
#   Add a space inside the delimiters of arrays. The flag is set by
#   default.
space-around-arrays = true

#--space-around-lists
#   Add a space inside the delimiters of lists. The flag is set by
#   default.
space-around-lists = true

#--space-around-records
#   Add a space inside the delimiters of records. The flag is set by
#   default.
space-around-records = true

#--space-around-variants
#   Add a space inside the delimiters of variants. The flag is set by
#   default.
space-around-variants = true

#--type-decl={compact|sparse}
#   Style of type declaration. compact will try to format constructors
#   and records definition in a single line. sparse will always break
#   between constructors and record fields. The default value is
#   compact.
type-decl = compact

#--wrap-comments
#   Wrap comments and docstrings. Comments and docstrings are divided
#   into paragraphs by open lines (two or more consecutive newlines),
#   and each paragraph is wrapped at the margin. Multi-line comments
#   with vertically-aligned asterisks on the left margin are not
#   wrapped. Consecutive comments with both left and right margin
#   aligned are not wrapped either. The flag is unset by default.
wrap-comments = true

#--wrap-fun-args
#   Style for function call. The flag is set by default.
wrap-fun-args = true
